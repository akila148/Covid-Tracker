{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Arial-BoldMT;
\f3\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid501\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid14}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\f1\b\fs36 \cf0 {\listtext	\uc0\u8226 	}Git:
\f0\b0  tracks changes to source code. Version control system\
{\listtext	\uc0\u8226 	}
\f1\b git init 
\f0\b0 \'97 creates a git repository.It is the git storage area. Contains snapshots of project.\
{\listtext	\uc0\u8226 	}To create the snapshot of the project in the repository we have two steps\
\pard\tx940\tx1440\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\f1\b git add .
\f0\b0  \'97 adds current directory with all files and sub directories in index(staging).\
\pard\tx940\tx1440\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1
\f1\b \cf0 {\listtext	\uc0\u8259 	}git commit - m \'93some comment\'94
\f0\b0  \'97 launches the contents of the index and adds it as the snapshot in the repository with the message describing what\'92s in it.\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f1\b git log \'97 
\f0\b0 gives the history of the project so far.\
{\listtext	\uc0\u8226 	}
\f1\b git status \'97 
\f0\b0 shows the modifications since last commit if any. It shows changes not staged for commit(to be git add) or changes to be committed (to be git commit).\
{\listtext	\uc0\u8226 	}
\f1\b git diff \'93commit-id1\'94 \'93commit-id2\'94
\f0\b0  \'97 gives the exact changes in files between these two commits\
{\listtext	\uc0\u8226 	}
\f1\b git checkout \'93commit-id\'94 \'97 
\f0\b0 rollback project files to the required version of snapshot. Copies from git repository to local.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0

\f1\b\fs48 \cf0 Why do we use git
\f0\b0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f1\b Tracking project history:
\f0\b0  We have the complete history of the project anytime with detailed information about the changes , authors, reviewers etc. And we can go back and forth to the versions, get back deleted files etc any number of times. It\'92s like having infinite undoes and redoes. git is not a backup. Source files are still in the local, if disk fails you loose the data. \
{\listtext	\uc0\u8226 	}
\f1\b Managing multiple versions of a project: 
\f0\b0 sometimes project needs to maintain two versions of code . Say free version and premium version. premium will have most of features from free version and some additional features. In such cases we have the option to branch out and add commits in particular branch. We can switch from one branch to another using 
\f1\b git switch branchname. 
\f0\b0 When there is need to incorporate changes in both the branches, merging is done. When same code is changed in both the branches conflicts arise while merging which has to be sorted by manual intervention.\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\f1\b \cf0 {\listtext	\uc0\u8226 	}Sharing code amongst developers: 
\f0\b0 The above applies for multiple people/teams working on the same codebase. Two people working on two different branches create temporary branches create commits and merge to the main branch.They resolve conflicts if any. More frequent commits are, easier it will be to manage conflicts.
\f1\b \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\f0\b0 \cf0 {\listtext	\uc0\u8226 	}
\f1\b Coordinating Teamwork: 
\f0\b0 The repository will be the source of truth for not just developers ,it extends to managers , testers, sys  admin and also other tools that can be integrated like:\
\pard\tx940\tx1440\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}Store bug reports. eg. Mantis. When an issue is identified it is tagged and developer fixes it is tracked.\
{\listtext	\uc0\u8259 	}Tracks work. eg. Jira. Allows managers to assign tasks and track progress.\
{\listtext	\uc0\u8259 	}Build machine. eg. Jenkins. Automates the process of compilation packaging, deployment in test servers, runs automated tests. We can also use it for continuous deployment where in any change in code is detected and run through all stages of testing deployed in production all automatically.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs48 \cf0 Git pros and cons
\f0\b0\fs24 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f2\b\fs32 \cf2 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Pros:
\f3\b0   \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls5\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f0 \uc0\u8259 
\f3 	}
\f0\fs36 \cf0 It's fast, smart (in the sense that it makes some common operations like renaming files, for example, as easy as they can be). It's very flexible and secure, it keeps your data safe. \
{\listtext	\uc0\u8259 	}It uses distributed version control.
\f3\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f2\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
cons: \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls5\ilvl1
\f3\b0 \cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f0 \uc0\u8259 
\f3 	}
\f0\fs36 \cf0 Git isn't very good at storing large binary files\
{\listtext	\uc0\u8259 	}Git isn't very friendly at first. It requires some training. 
\f3\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf2 \

\f1\b\fs48 \cf0 \kerning1\expnd0\expndtw0 Git online services (GitHub,gitlab,bitbucket) 
\f2\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f3\b0 \cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f0 \uc0\u8259 
\f3 	}
\f0\fs36 \cf0 Repository hosting service\
{\listtext	\uc0\u8259 	}Provides project management tools\
{\listtext	\uc0\u8259 	}Social network for coding\
{\listtext	\uc0\u8259 	}open source workflow - remote repository -> instead of cloning it in local machine. There is a feature to fork a remote repository (can be read by anyone, but written only by the user who created), work on the changes and create a pull request asking to merge the changes to original repository.\
\pard\tx566\tx1133\pardeftab720\partightenfactor0

\f3\fs32 \cf2 \expnd0\expndtw0\kerning0
\

\f1\b\fs48 \cf0 \kerning1\expnd0\expndtw0 Core understanding of git - GIT object model :\
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f0\b0\fs36 \cf0 {\listtext	\uc0\u8226 	}Git is a map with keys as hashes(sha1 algorithm 40 hex digits / 20 bytes) and content as value. Eg. echo \'93Hello World\'94 | 
\f1\b git hash-object  - - stdin 
\f0\b0 .. creates and displays a hash\
{\listtext	\uc0\u8226 	}Git is a persistent map. It stores the map on .git repository. To write hash to file and make it persistent echo \'93Hello World\'94 | 
\f1\b git hash-object  - - stdin -w . 
\f0\b0 U can find the file under .git -> objects -> folder starting in first two letters of hash.
\f1\b  
\f0\b0 The files saved are called 
\f1\b blob 
\f0\b0 of data
\f1\b . 
\f0\b0 Contents of file can be read using 
\f1\b git cat-fish hashvalue -t (
\f0\b0 returns type
\f1\b ), git cat-fish hashvalue -p (
\f0\b0 prints actual content
\f1\b ).\
{\listtext	\uc0\u8226 	}
\f0\b0 How is first commit of the project stored under hood? Say ur project has 1 file menus.txt, 1 directory recipes -> 2 files (read.txt & apple_pie.txt). When u add this to staging area and commit, few directories are generated under .git->objects . First commit hash first 2 letters folder will have a file named with rest of the letters( contents will be metadata containing details of author ,committer, date, commit message and tree hash for root of project).This hash will have one blob for  menus.txt as it is a file and one tree hash for recipes directory (will have details of further files in the tree structure the same way). Blob hashes the content of the file. Other metadata of the file like permissions is not included in the blob hash, it is added to the tree hash. So if two files have same data got will not create new object.\
{\listtext	\uc0\u8226 	}How does versioning work under the hood? Say u r making a simple change in menus.txt in the above project and commit it. The new commit hash will have one additional metadata that is the parent which points to the previous commit hash. The new tree hash would have changed. Blob of menus.txt will be different. But tree hash for recipes would still point to the previous tree hash as there is no change inside the recipes directory. For more complex changes which is the usual case, git will hash the delta instead of actual data or compress multiple objects  to optimise storage. All these data will be available under info & pack directories. We can find the number of objects created using 
\f1\b git count-objects.
\f0\b0 \
{\listtext	\uc0\u8226 	}we have seen 3 types of objects commit ,tree & blob. One more is annotated tags is like labels.\
{\listtext	\uc0\u8226 	}git object model can be understood as a high-level linux file system structure. blob(as in files), tree(as in recursive directories), objects of files with same content( links in linux).\
\pard\tx566\tx1133\pardeftab720\partightenfactor0

\f1\b \cf0 \
\pard\tx566\tx1133\pardeftab720\partightenfactor0

\fs48 \cf0 Branching and merging:\
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f0\b0\fs36 \cf0 {\listtext	\uc0\u8226 	}Git creates a branch with the first commit that is the main branch. 
\f1\b git branch \'97 
\f0\b0 provides the list of branches. Git branches are stored in .git->refs->heads folder. One file for each branch containing hash of the last commit.\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f1\b \cf0 {\listtext	\uc0\u8226 	}
\f0\b0 To create a new branch
\f1\b  git branch branchname (eg.ideas).\
{\listtext	\uc0\u8226 	}git branch 
\f0\b0 now shows two branches with * on current branch. This information is stored in HEAD file under .git folder containing reference to current branch file.\
\ls8\ilvl0
\f1\b {\listtext	\uc0\u8226 	}
\f0\b0 consider a new commit is done on the main branch, now 
\f1\b main
\f0\b0  will point to latest commit. 
\f1\b Ideas
\f0\b0  branch remains on the previous one as there is no change. HEAD moves along with 
\f1\b main
\f0\b0 .\
\ls8\ilvl0
\f1\b {\listtext	\uc0\u8226 	}
\f0\b0 To change to ideas branch
\f1\b  ,git switch ideas. 
\f0\b0 In older versions 
\f1\b git checkout 
\f0\b0 was used. Checkout has to be used for specific cases. To change branch we can use switch.\
\ls8\ilvl0
\f1\b {\listtext	\uc0\u8226 	}
\f0\b0 When we switch branch ,2 things happen:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}head points to current branch\
{\listtext	\uc0\u8259 	}working directory content is replaced with latest commit of current branch\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f1\b \cf0 {\listtext	\uc0\u8226 	}
\f0\b0 When a new commit happens in ideas branch ,ref points to the new commit  and head moves along\
{\listtext	\uc0\u8226 	}To merge changes, switch to main and run 
\f1\b git merge ideas. 
\f0\b0 When there is conflict , we manually confirm the changes and then do add and commit. Now git will create a new commit on main with two parents. Ideas will still point to the previous commit.\
{\listtext	\uc0\u8226 	}In terms of git objects, there are several references in the model. Commits refer to their parent commits. commits refer to trees. Trees refer to blobs or more trees in the file structure. Here references between commits and their parents are used to track history. Other references are used to track content. So when you switch from one branch to another git doesn\'92t care about history(it ignores parent details),all it cares is the trees and blobs that are to be made available in the working directory. That\'92s how we travel back and forth in time. Merged commits also work in the same way, git only looks at the latest commit and objects that can be accessed from there, it doesn\'92t care about parents.\
{\listtext	\uc0\u8226 	}Objects in the git repository are persistent and immutable. Files in working area are transient . Git will warn u if u have uncommitted changes in the working area and u try to switch branch. Apart from this git concerned about the repository not about the working area.\
{\listtext	\uc0\u8226 	}
\f1\b Merging without merging: 
\f0\b0  Fast-forward happens when git knows there exists a commit object which contains latest commits of the two merging branches. It just shift pointing to the existing merged commit instead of creating a new commit object. eg. 
\f1\b git switch main -> git merge ideas -> newcommit
\f0\b0 . When u do 
\f1\b git switch ideas -> git merge main -> 
\f0\b0 no new commit created instead 
\f1\b ideas branch
\f0\b0  points to existing 
\f1\b newcommit.\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f0\b0 \cf0 {\listtext	\uc0\u8226 	}
\f1\b Losing Head: git checkout commithash -> 
\f0\b0 using this command we can checkout a commit without referencing it to any branch .. in this case head will be directly pointing to the commithash. consider u make a couple of commits like this and then decide then switch main.. now u can\'92t go back to the changes if u don\'92t have the commithash.. such commits without any reference to branches will be garbage collected. If u want to make it persistent and reachable after experimenting , u can checkout the commithash and do 
\f1\b git branch branchname.\
\ls8\ilvl0
\f0\b0 {\listtext	\uc0\u8226 	}
\f1\b 3 rules: summary
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}The current branch tracks new commits. Current branch moves to the new commit. In detached case, head moves to new commit.\
{\listtext	\uc0\u8259 	}Working directory is updated automatically when u move to another commit using git switch / git checkout.\
{\listtext	\uc0\u8259 	}Any commit, blob or tree that can\'92t be reached from branch, tag or head is considered dead and can be garbage collected.\
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \

\f1\b\fs48 Rebasing:\
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0
\f0\b0\fs36 \cf0 {\listtext	\uc0\u8226 	}Rebasing is when make the base of one branch(first commit in given branch after the commit that is common between both the branches)  as the child of last commit in the other branch. 
\f1\b git switch ideas -> git rebase main
\f0\b0  .. this will rebase ideas on main. Fast-forward applies on rebasing as well.In rebasing branches are rearranged to look like one single branch.
\f1\b\fs48 \
\ls9\ilvl0
\f0\b0\fs36 {\listtext	\uc0\u8226 	}In rebasing parent details are changed. So commit hashes will change. Hence it is not a direct process. Git creates new commit objects with same data but updated parent details and the old commits are discarded for garbage collection.\
{\listtext	\uc0\u8226 	}why do have rebase when merging is available?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}merge preserves history exactly how it happened. But history looks cumbersome.\
{\listtext	\uc0\u8259 	}rebase makes the history look a lot cleaner as if everything happened linearly. But it is made to believe with recreating commit objects. This can cause other side effects. Rebasing is to be used with caution.\
{\listtext	\uc0\u8259 	}when in doubt use merge.\
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \

\f1\b\fs48 Tags:\
	\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\fs36 \cf0 {\listtext	\uc0\u8226 	}Annotated tags: 
\f0\b0 It is like a label for a commit. To create a tag 
\f1\b git tag tagname -a(annotated) -m \'93message\'94 . 
\f0\b0 To list tags 
\f1\b git tag. 
\f0\b0 We can use 
\f1\b git checkout tagname.\
\ls10\ilvl0
\f0\b0 {\listtext	\uc0\u8226 	}under the hood, tags are stored in 
\f1\b .git->refs->tags. 
\f0\b0 Each tagname has a file in this directory with a hash. Hash contains similar to commit data with details of tagger, message and 	 commit object. Type of this object is tag.\
{\listtext	\uc0\u8226 	}tag is two things. One its like a branch like reference that doesn\'92t contain data ,just a name.It is  also an object. The reference points to a database object of type tag and in turn this tag object points to a commit.\
{\listtext	\uc0\u8226 	}we can also directly create a simple tag that directly points to the commit without -a. 
\f1\b git tag tagname. 
\f0\b0 Here there is no meta data like tagger message reference etc. These are called lightweight tags. It is almost similar to a branch, only difference being it doesn\'92t move along with the upcoming new commits like branches. Tags just stick to the commits where it was created.\
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \

\f1\b\fs48 Distributed version control:\
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\fs36 git clone remote-repository -> 
\f0\b0 gets  .git directory and all the files from main branch from remote to local working area. Git is not like other versioning control systems that has one central server and everyone else talks to that server. git repository can be cloned to as many local systems and synchronise with each other. \
{\listtext	\uc0\u8226 	}
\f1\b .git/config 
\f0\b0 file has information about other copies. When u clone default remote names 
\f1\b origin
\f0\b0  is defined pointing to the url.\
{\listtext	\uc0\u8226 	}git branch -> local branches \
{\listtext	\uc0\u8226 	}git branch - -all -> gives remote branches also. 
\f1\b .git->refs->remotes 
\f0\b0 will have details of remote branches. Sometimes not all branches are displayed instead stored in packed-refs for optimisation. 
\f1\b git show-ref main
\f0\b0  lists all branches that has Main in their name both local and remote.	\
{\listtext	\uc0\u8226 	}To synchronise remote repository with the local changes use 
\f1\b git push
\f0\b0 .\
{\listtext	\uc0\u8226 	}Consider cases where remote branch is updated. 
\f1\b git push -f
\f0\b0  can be used but not recommended. Instead 
\f1\b fetch and merge 
\f0\b0 changes resolve conflicts and then push to remote. fetch+merge = 
\f1\b git pull\
{\listtext	\uc0\u8226 	}
\f0\b0 Rebasing when working with shared repositories can lead to duplicated commits ,because when u rebase in local new duplicated commit copies are created which when pushed will create duplicate line of objects in the repository.\
{\listtext	\uc0\u8226 	}GitHub - fork creates cloud clones(origin) .original cloud repository will be called upstream.Usually It will only have read access. To make changes developers create pull request to admins of open source projects.\
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \

\f1\b\fs48 Four areas of git:\
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0
\fs36 \cf0 {\listtext	\uc0\u8226 	}Working area: 
\f0\b0 local file system.
\f1\b \
{\listtext	\uc0\u8226 	}Repository: 
\f0\b0 .git folder. Object database. Blobs ,trees, commits and tags.commit is Snapshot of working area at a certain point. Each commit points to its parent commits and forms a chain. Reference to commits is called branch. Branch becomes entry point  to history of commits.you can have multiple branches that are multiple slices of history. Head is the pointer to current branch.sometimes you can do operations that result in commits that cannot be reached from any branch. For example, if I delete a branch, some commits become unreachable. Git will eventually delete such commits by garbage collection.\
\ls12\ilvl0
\f1\b {\listtext	\uc0\u8226 	}Index: 
\f0\b0 unique to git-allows to modify index area. Index is called the staging area. Data from working area is moved to repository through the index. When the project status is clean working area , current commit in the repository and index are all aligned. 
\f1\b .git->index
\f0\b0  is a binary file. 
\f1\b git diff
\f0\b0  will compare working area with index. 
\f1\b git status
\f0\b0  is better to check this difference. 
\f1\b git diff - - cached
\f0\b0  shows difference between index and repository.
\f1\b \
{\listtext	\uc0\u8226 	}Stash:
\f0\b0 \
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \

\f1\b\fs48 Basic workflow commands:\

\f0\b0\fs36 \
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\f1\b \cf0 {\listtext	\uc0\u8226 	}Always ask 2 questions :
\f0\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	\uc0\u8259 	}how does this command move info across 4 areas\
{\listtext	\uc0\u8259 	}how does this command change the repository\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f1\b Move data to right :
\f0\b0  working area -> index -> repository.. git add(index) -> git commit(repository). Commit creates objects moves branches etc.\
{\listtext	\uc0\u8226 	}
\f1\b Move data to left: 
\f0\b0 repository to working area & index. Commands like git switch & git checkout. In Repository head is changed to point to the required branch . And content of current commit are copied to index and working area.\
{\listtext	\uc0\u8226 	}
\f1\b removing/ unstaging a file:
\f0\b0  remove from index not from the working area. 
\f1\b git rm - -cached filename.
\f0\b0  To remove from both working area and index
\f1\b  git rm filename. 
\f0\b0 -f can be used to forcefully remove.\
{\listtext	\uc0\u8226 	}
\f1\b renaming / moving a file: 
\f0\b0 when u rename a file git automatically detects it in most cases. U just have to git add as usual. What internally happens is 
\f1\b git add Newfie
\f0\b0  will be moved to index . 
\f1\b git add oldfile
\f0\b0  will replace index file with empty content meaning removed. There is also
\f1\b  git mv oldfile Newfile
\f0\b0  to do this but  is not used commonly.  \
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \

\f1\b Git Reset:\
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0
\f0\b0 \cf0 {\listtext	\uc0\u8226 	}Some commands that move the branch(which commit it is currently pointing at, in the repository). Commit, rebase, merge, pull etc. all these commands move the branch implicitly as a part of the operation. Reset specifically moves a branch to the required commithash and does the following copy based on option \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls14\ilvl1
\f1\b \cf0 {\listtext	\uc0\u8259 	}Git reset - - hard branchname/commithash 
\f0\b0 copies from repository to both index and working area.\
\ls14\ilvl1
\f1\b {\listtext	\uc0\u8259 	}Git reset - - mixed(default) branchname/commithash 
\f0\b0 copies from repository to both index only.\
\ls14\ilvl1
\f1\b {\listtext	\uc0\u8259 	}Git reset - - soft branchname/commithash 
\f0\b0  no copy only changes the branch.\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf0 {\listtext	\uc0\u8226 	}example. U made a couple of commits into repository recently. Now u change ur mind to go back to two versions earlier. U can do 
\f1\b git reset - - hard commithash. 
\f0\b0 Old version of files will be copied to working area and index. The two commits without any branch reference now will be garbage collected. In shared remote repository history altering commands like reset should not be used.\
{\listtext	\uc0\u8226 	}example 2. U added a change to staging. Now to want undo that. Instead of doing rm - -cached, u could also do 
\f1\b git reset HEAD
\f0\b0 .\
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \
\
}